package actions

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"library/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Customer)
// DB Table: Plural (customers)
// Resource: Plural (Customers)
// Path: Plural (/customers)
// View Template Folder: Plural (/templates/customers/)

// CustomersResource is the resource for the Customer model
type CustomersResource struct {
	buffalo.Resource
}

func (v CustomersResource) CustomersIndex(c buffalo.Context) error {
	// Define DataTables request parameters
	draw := c.Param("draw")
	start, _ := strconv.Atoi(c.Param("start"))
	length, _ := strconv.Atoi(c.Param("length"))
	searchValue := c.Param("search[value]")
	orderColumnIndex, _ := strconv.Atoi(c.Param("order[0][column]"))
	orderColumnName := c.Param("columns[" + strconv.Itoa(orderColumnIndex) + "][data]")
	orderDir := c.Param("order[0][dir]")

	// Create a DB connection
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Calculate pagination values
	currentPage := (start / length) + 1
	perPage := length

	// Prepare the query
	q := tx.Paginate(currentPage, perPage)
	q = q.Order(orderColumnName + " " + orderDir)

	// Apply search filter
	if searchValue != "" {
		q = q.Where("name LIKE ? OR email LIKE ? OR mobile LIKE ? OR address LIKE ?", "%"+searchValue+"%", "%"+searchValue+"%", "%"+searchValue+"%", "%"+searchValue+"%")
	}

	// Fetch the data
	var customers models.Customers
	if err := q.All(&customers); err != nil {
		return err
	}

	// Get the total count
	count, err := tx.Count(&models.Customers{})
	if err != nil {
		return err
	}

	// Prepare the response
	response := map[string]interface{}{
		"draw":            draw,
		"recordsTotal":    count,
		"recordsFiltered": len(customers),
		"data":            formatCustomersData(customers),
	}

	return c.Render(200, r.JSON(response))
}

func formatCustomersData(customers models.Customers) []interface{} {
	var formattedData []interface{}

	for _, customer := range customers {
		// Create a new map to hold the formatted category data
		formattedCustomer := make(map[string]interface{})

		// Add the existing category data
		formattedCustomer["id"] = customer.ID
		customerID := customer.ID.String()
		formattedCustomer["name"] = customer.Name
		formattedCustomer["email"] = customer.Email
		formattedCustomer["mobile"] = customer.Mobile
		formattedCustomer["address"] = customer.Address

		formattedCustomer["updated_at"] = customer.UpdatedAt.Format("01-02-2006 (03:04 PM)")
		// Add the custom action column with edit and delete buttons
		actions := "<button class='btn btn-default showData' data-id='" + customerID + "' data-modulename='customers'><i class='fa fa-eye'></i></button> " +
			"<button class='btn btn-default editData' data-id='" + customerID + "' data-modulename='customers'><i class='fa fa-edit'></i></button> " +
			"<button class='btn btn-default deleteData' data-id='" + customerID + "' data-modulename='customers'><i class='fa fa-trash'></i></button>"
		formattedCustomer["actions"] = actions

		// Add the formatted category data to the response
		formattedData = append(formattedData, formattedCustomer)
	}

	return formattedData
}

// List gets all Customers. This function is mapped to the path
// GET /customers
func (v CustomersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	customers := &models.Customers{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Customers from the DB
	if err := q.All(customers); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("customers", customers)
		c.Set("PageTitle", "All Customers")
		return c.Render(http.StatusOK, r2.HTML("backend/customers/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r2.JSON(customers))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r2.XML(customers))
	}).Respond(c)
}

// Show gets the data for one Customer. This function is mapped to
// the path GET /customers/{customer_id}
func (v CustomersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Customer
	customer := &models.Customer{}

	// To find the Customer the parameter customer_id is used.
	if err := tx.Find(customer, c.Param("customer_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("customer", customer)
		c.Set("PageTitle", "Show Customer")
		return c.Render(http.StatusOK, r2.HTML("backend/customers/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r2.JSON(customer))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r2.XML(customer))
	}).Respond(c)
}

// New renders the form for creating a new Customer.
// This function is mapped to the path GET /customers/new
func (v CustomersResource) New(c buffalo.Context) error {
	c.Set("customer", &models.Customer{})
	c.Set("PageTitle", "Create Customer")
	return c.Render(http.StatusOK, r2.HTML("backend/customers/new.plush.html"))
}

// Create adds a Customer to the DB. This function is mapped to the
// path POST /customers
func (v CustomersResource) Create(c buffalo.Context) error {
	// Allocate an empty Customer
	customer := &models.Customer{}

	// Bind customer to the html form elements
	if err := c.Bind(customer); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(customer)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("PageTitle", "Create Customer")
			c.Set("customer", customer)

			return c.Render(http.StatusUnprocessableEntity, r2.HTML("backend/customers/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r2.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r2.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "customer.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/auth/customers/%v", customer.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r2.JSON(customer))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r2.XML(customer))
	}).Respond(c)
}

// Edit renders a edit form for a Customer. This function is
// mapped to the path GET /customers/{customer_id}/edit
func (v CustomersResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Customer
	customer := &models.Customer{}

	if err := tx.Find(customer, c.Param("customer_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}
	c.Set("PageTitle", "Edit Customer")
	c.Set("customer", customer)
	return c.Render(http.StatusOK, r2.HTML("backend/customers/edit.plush.html"))
}

// Update changes a Customer in the DB. This function is mapped to
// the path PUT /customers/{customer_id}
func (v CustomersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Customer
	customer := &models.Customer{}

	if err := tx.Find(customer, c.Param("customer_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Customer to the html form elements
	if err := c.Bind(customer); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(customer)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("PageTitle", "Edit Customer")
			c.Set("customer", customer)

			return c.Render(http.StatusUnprocessableEntity, r2.HTML("backend/customers/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r2.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r2.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "customer.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/auth/customers/%v", customer.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r2.JSON(customer))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r2.XML(customer))
	}).Respond(c)
}

// Destroy deletes a Customer from the DB. This function is mapped
// to the path DELETE /customers/{customer_id}
func (v CustomersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Customer
	customer := &models.Customer{}

	// To find the Customer the parameter customer_id is used.
	if err := tx.Find(customer, c.Param("customer_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(customer); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "customer.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/auth/customers")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r2.JSON(customer))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r2.XML(customer))
	}).Respond(c)
}
