package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"library/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (AssignBook)
// DB Table: Plural (assign_books)
// Resource: Plural (AssignBooks)
// Path: Plural (/assign_books)
// View Template Folder: Plural (/templates/assign_books/)

// AssignBooksResource is the resource for the AssignBook model
type AssignBooksResource struct {
	buffalo.Resource
}

// List gets all AssignBooks. This function is mapped to the path
// GET /assign_books
func (v AssignBooksResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	assignBooks := &models.AssignBooks{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all AssignBooks from the DB
	if err := q.All(assignBooks); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)
		c.Set("PageTitle", "Assign Books List")
		c.Set("assignBooks", assignBooks)
		return c.Render(http.StatusOK, r2.HTML("backend/assign_books/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r2.JSON(assignBooks))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r2.XML(assignBooks))
	}).Respond(c)
}

// Show gets the data for one AssignBook. This function is mapped to
// the path GET /assign_books/{assign_book_id}
func (v AssignBooksResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty AssignBook
	assignBook := &models.AssignBook{}

	// To find the AssignBook the parameter assign_book_id is used.
	if err := tx.Find(assignBook, c.Param("assign_book_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("assignBook", assignBook)
		c.Set("PageTitle", "Show Assign Book")
		return c.Render(http.StatusOK, r2.HTML("backend/assign_books/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r2.JSON(assignBook))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r2.XML(assignBook))
	}).Respond(c)
}

// New renders the form for creating a new AssignBook.
// This function is mapped to the path GET /assign_books/new
func (v AssignBooksResource) New(c buffalo.Context) error {
	c.Set("assignBook", &models.AssignBook{})
	c.Set("PageTitle", "Assign a Book")
	return c.Render(http.StatusOK, r2.HTML("backend/assign_books/new.plush.html"))
}

// Create adds a AssignBook to the DB. This function is mapped to the
// path POST /assign_books
func (v AssignBooksResource) Create(c buffalo.Context) error {
	// Allocate an empty AssignBook
	assignBook := &models.AssignBook{}

	// Bind assignBook to the html form elements
	if err := c.Bind(assignBook); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(assignBook)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)
			c.Set("PageTitle", "Assign a Book")
			// Render again the new.html template that the user can
			// correct the input.
			c.Set("assignBook", assignBook)

			return c.Render(http.StatusUnprocessableEntity, r2.HTML("backend/assign_books/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r2.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r2.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "assignBook.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/auth/assign_books/%v", assignBook.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r2.JSON(assignBook))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r2.XML(assignBook))
	}).Respond(c)
}

// Edit renders a edit form for a AssignBook. This function is
// mapped to the path GET /assign_books/{assign_book_id}/edit
func (v AssignBooksResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty AssignBook
	assignBook := &models.AssignBook{}

	if err := tx.Find(assignBook, c.Param("assign_book_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}
	c.Set("PageTitle", "Edit Assign Book")
	c.Set("assignBook", assignBook)
	return c.Render(http.StatusOK, r2.HTML("backend/assign_books/edit.plush.html"))
}

// Update changes a AssignBook in the DB. This function is mapped to
// the path PUT /assign_books/{assign_book_id}
func (v AssignBooksResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty AssignBook
	assignBook := &models.AssignBook{}

	if err := tx.Find(assignBook, c.Param("assign_book_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind AssignBook to the html form elements
	if err := c.Bind(assignBook); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(assignBook)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)
			c.Set("PageTitle", "Edit Assign Book")
			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("assignBook", assignBook)

			return c.Render(http.StatusUnprocessableEntity, r2.HTML("backend/assign_books/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r2.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r2.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "assignBook.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/auth/assign_books/%v", assignBook.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r2.JSON(assignBook))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r2.XML(assignBook))
	}).Respond(c)
}

// Destroy deletes a AssignBook from the DB. This function is mapped
// to the path DELETE /assign_books/{assign_book_id}
func (v AssignBooksResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty AssignBook
	assignBook := &models.AssignBook{}

	// To find the AssignBook the parameter assign_book_id is used.
	if err := tx.Find(assignBook, c.Param("assign_book_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(assignBook); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "assignBook.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/auth/assign_books")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r2.JSON(assignBook))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r2.XML(assignBook))
	}).Respond(c)
}
